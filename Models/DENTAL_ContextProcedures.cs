// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ADO_DENTAL_CLINIC.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ADO_DENTAL_CLINIC.Models
{
    public partial class DENTAL_Context
    {
        private IDENTAL_ContextProcedures _procedures;

        public virtual IDENTAL_ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new DENTAL_ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IDENTAL_ContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class DENTAL_ContextProcedures : IDENTAL_ContextProcedures
    {
        private readonly DENTAL_Context _context;

        public DENTAL_ContextProcedures(DENTAL_Context context)
        {
            _context = context;
        }

        public virtual async Task<List<CityNameResult>> CityNameAsync(string reg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reg",
                    Size = 55,
                    Value = reg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CityNameResult>("EXEC @returnValue = [dbo].[CityName] @reg = @reg", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RegionNameResult>> RegionNameAsync(string reg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reg",
                    Size = 55,
                    Value = reg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RegionNameResult>("EXEC @returnValue = [dbo].[RegionName] @reg = @reg", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
